%{
/*
Copyright 2024 Zach Flynn <zlflynn@gmail.com>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
“AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include <stdio.h>     
#include <stdlib.h>
#include <string.h>
#include "m.h"
#define YYSTYPE char*
#define YY_INPUT(ctx, buf, result, max_size) \
{ \
char yyc = fgetc(M_INPUT); \
*(buf) = yyc; \
result = (yyc == EOF) ? 0 : 1; \
}
;

#define LCURLY "{"
#define RCURLY "}"
#define YY_CTX_LOCAL
FILE* M_INPUT = NULL;
char* M_OUTPUT = NULL;
%}

Statement = - s:Command - EOL { M_OUTPUT = s; }  |
          - s:Command - EOF { M_OUTPUT = s; }

EOF = !.
- = [ \t]*

Command =
         e:Expr - c:Command { $$ = concat_element(e, c); }
        | e1:Expr - e2:Expr { $$ = concat_element(e1,e2); }        
        | Expr

Expr = 
          a:Atom  "_"  Left - c1:Command - Right "^" Left - c2:Command - Right { $$ = tag_element(concat_element(a, concat_element(tag_element(c1, "mrow"),tag_element(c2, "mrow"))), "msubsup");}
        | a:Atom "_"  Left - c:Command - Right { $$ = tag_element(concat_element(a,tag_element(c, "mrow")), "msub");}
        | a:Atom "^"  Left - c:Command - Right {  $$ = tag_element(concat_element(tag_element(a, "mrow"),tag_element(c, "mrow")), "msup");}
        | Atom

Atom = l:Left - u:UnitFunction - r:Right { $$ = tag_element(u, "mrow"); } |
          UnitFunction

UnitFunction = Function | Unit

Function =
  UnaryFunction
  | BinaryFunction
  | TerinaryFunction
  | MatrixFunction

Unit =
  s:Symbol
  ( si:Symbol { s = concat_element(s,si); }
  )* { $$ = copy_string(s); }

Left =  "[" { $$ = tag_element("[", "mo"); }
     
Right = "]" { $$ = tag_element("]", "mo"); }

Sep = "," -

Unary = "@sqrt" {$$ = copy_string("sqrt");}
      | "@sum" {$$ = copy_string("sum");}
      | "@op" {$$ = copy_string("op");}
      | "@text" {$$ = copy_string("text");}
      | "@hat" {$$ = copy_string("hat");}
      | "@overline" {$$ = copy_string("overline");}
      | "@underline" {$$ = copy_string("underline");}
      | "@vec" {$$ = copy_string("vec"); }
      | "@dot" {$$ = copy_string("dot"); }
      | "@ddot" {$$ = copy_string("ddot"); }
      | "@bbb" {$$ = copy_string("bbb");}      
      | "@bb" {$$ = copy_string("bb");}
      | "@cc" { $$ = copy_string("cc");}
      | "@tt" {$$ = copy_string("tt");}
      | "@fr" {$$ = copy_string("fr");}
      | "@sf" {$$ = copy_string("sf");}
      | "@abs" {$$ = copy_string("abs");}


Binary = "@frac" {$$ = copy_string("frac");} 
       | "@sum" {$$ = copy_string("sum");}
       | "@root" {$$ = copy_string("root");}
       | "@color" {$$ = copy_string("color");}
       | "@super" {$$ = copy_string("super");}
       | "@sub" {$$ = copy_string("sub");}
       | "@over" { $$ = copy_string("over"); }
       | "@under" { $$ = copy_string("under"); }

Terinary = "@underover" { $$ = copy_string("underover"); }

BinaryFunction = b:Binary Left e1:Command Sep e2:Command Right { $$ = handle_binary(b, e1, e2); }

UnaryFunction = u:Unary Left e:Command Right { $$ = handle_unary(u, e); }

TerinaryFunction = t:Terinary Left e1:Command Sep e2:Command Sep e3:Command Right { $$ = handle_terinary(t, e1, e2, e3); } 



List = e:Command Sep l:List { $$ = concat_element(tag_element(e, "mtd"), l); }
     | e1:Command Sep e2:Command { $$ = concat_element(tag_element(e1,"mtd"), tag_element(e2, "mtd")); }
     | e:Command { $$ = tag_element(e, "mtd"); }

Row = l:Left u:List r:Right { $$ = tag_element(u, "mtr"); }

MatrixInnerFunction = r:Row Sep m:MatrixInnerFunction  { $$ = concat_element(r, m); }
                | Row

MatrixLeft =  "[" { $$ = tag_element("[", "mo"); }
           | "(" { $$ = tag_element("(", "mo"); }
           | "{" { $$ = tag_element(LCURLY, "mo"); }
     
MatrixRight = "]" { $$ = tag_element("]", "mo"); }
           | ")" { $$ = tag_element(")", "mo"); }
           | "}" { $$ = tag_element(RCURLY, "mo"); }
           
MatrixFunction = l:MatrixLeft i:MatrixInnerFunction r:MatrixRight { $$ = tag_element(concat_element(l, concat_element(tag_element(i, "mtable"), r)), "mrow"); }


Symbol = Text | RawText | Number | Op | ID 

Greek = "alpha" { $$ = tag_element("α", "mi"); }
  | "beta"  { $$ = tag_element("β", "mi"); }
  | "chi"   { $$ = tag_element("χ", "mi"); }
  | "delta" { $$ = tag_element("δ", "mi"); }
  | "Delta" { $$ = tag_element("Δ", "mi"); }
  | "epsilon" { $$ = tag_element("ε", "mi"); }
  | "epsi"  { $$ = tag_element("ε", "mi"); }
  | "varepsilon"  { $$ = tag_element("ε", "mi"); }
  | "eta"   { $$ = tag_element("η", "mi"); }
  | "gamma" { $$ = tag_element("γ", "mi"); }
  | "Gamma" { $$ = tag_element("Γ", "mi"); }
  | "iota"  { $$ = tag_element("ι", "mi"); }
  | "kappa" { $$ = tag_element("κ", "mi"); }
  | "lambda"  { $$ = tag_element("λ", "mi"); }
  | "Lambda"  { $$ = tag_element("Λ", "mi"); }
  | "mu"    { $$ = tag_element("μ", "mi"); }
  | "nu"    { $$ = tag_element("ν", "mi"); }
  | "omega" { $$ = tag_element("ω", "mi"); }
  | "Omega" { $$ = tag_element("Ω", "mi"); }
  | "phi"   { $$ = tag_element("φ", "mi"); }
  | "varphi"  { $$ = tag_element("φ", "mi"); }
  | "Phi"   { $$ = tag_element("Φ", "mi"); }
  | "pi"    { $$ = tag_element("π", "mi"); }
  | "Pi"    { $$ = tag_element("Π", "mi"); }
  | "psi"   { $$ = tag_element("ψ", "mi"); }
  | "Psi"   { $$ = tag_element("Ψ", "mi"); }
  | "rho"   { $$ = tag_element("ρ", "mi"); }
  | "sigma" { $$ = tag_element("σ", "mi"); }
  | "Sigma" { $$ = tag_element("Σ", "mi"); }
  | "tau"   { $$ = tag_element("τ", "mi"); }
  | "theta" { $$ = tag_element("θ", "mi"); }
  | "vartheta"  { $$ = tag_element("ϑ", "mi"); }
  | "Theta" { $$ = tag_element("Θ", "mi"); }
  | "upsilon" { $$ = tag_element("υ", "mi"); }
  | "xi"    { $$ = tag_element("ξ", "mi"); }
  | "Xi"    { $$ = tag_element("Ξ", "mi"); }
  | "zeta"  { $$ = tag_element("ζ", "mi"); }

ID = Greek
  | "CC"      { $$ = tag_element("ℂ", "mi"); }
  | "NN"      { $$ = tag_element("ℕ", "mi"); }
  | "QQ"      { $$ = tag_element("ℚ", "mi"); }
  | "RR"      { $$ = tag_element("ℝ", "mi"); }
  | "ZZ"      { $$ = tag_element("ℤ", "mi"); }
  | < [a-zA-Z]+ > { $$ = tag_element(yytext, "mi"); }
     
Number = < [0-9]+ ('.' [0-9]+)? > { $$ = tag_element(yytext, "mn");}
Text = ["] < (!["] .)* > ["] { $$ = tag_element(yytext, "mtext"); }
RawText = [`] < (![`] .)* > [`] { $$ = copy_string(yytext); }

Op  = 
    "uparrow"     { $$ = tag_element("↑", "mo"); }
  | "downarrow"   { $$ = tag_element("↓", "mo"); }
  | "leftarrow"   { $$ = tag_element("←", "mo"); }
  | "rightarrow"  { $$ = tag_element("→", "mo"); }
  | "harrow"      { $$ = tag_element("↔", "mo"); }
  | "thickrightarrow"   { $$ = tag_element("⇒", "mo"); }
  | "thickleftarrow"  { $$ = tag_element("⇐", "mo"); }
  | "thickharrow"     { $$ = tag_element("⇔", "mo"); }
  | "mapstoarrow"   { $$ = tag_element("↦", "mo"); }
  | "toarrow"       { $$ = tag_element("→", "mo"); }
  | "tailtwoheadrightarrow"   { $$ = tag_element("⤖", "mo"); }
  | "tailrightarrow"    { $$ = tag_element("↣", "mo"); }
  | "twoheadrightarrow"   { $$ = tag_element("↠", "mo"); }
  | "leftrightarrow"    { $$ = tag_element("↔", "mo"); }
  | "thickleftrightarrow"     { $$ = tag_element("⇔", "mo"); }
  | "neg"   { $$ = tag_element("¬", "mo"); }
  | "implies"   { $$ = tag_element("⇒", "mo"); }
  | "iff"   { $$ = tag_element("⇔", "mo"); }
  | "forall"  { $$ = tag_element("∀", "mo"); }
  | "exists"  { $$ = tag_element("∃", "mo"); }
  | "bottom"  { $$ = tag_element("⊥", "mo"); }
  | "top"   { $$ = tag_element("⊤", "mo"); }
  | "vdash"  { $$ = tag_element("⊢", "mo"); }
  | "models"  { $$ = tag_element("⊨", "mo"); }
  | "int"       { $$ = tag_element("∫", "mo"); }
  | "oint"    { $$ = tag_element("∮", "mo"); }
  | "partialder"  { $$ = tag_element("∂", "mo"); }
  | "nabla"   { $$ = tag_element("∇", "mo"); }
  | "pm"    { $$ = tag_element("±", "mo"); }
  | "emptyset"   { $$ = tag_element("∅", "mo"); }
  | "infty"   { $$ = tag_element("∞", "mo"); }
  | "aleph"     { $$ = tag_element("ℵ", "mo"); }
  | "ldots"   { $$ = tag_element("…", "mo"); }
  | "therefore"   { $$ = tag_element("∴", "mo"); }
  | "triangle"  { $$ = tag_element("△", "mo"); }
  | "angle"   { $$ = tag_element("∠", "mo"); }
  | "prime"   { $$ = tag_element("′", "mo"); }
  | "space"       { $$ = tag_element("&nbsp;", "mo"); }
  | "frown"     { $$ = tag_element("⌢", "mo"); }
  | "quad"    { $$ = tag_element("&nbsp;&nbsp;", "mo"); }
  | "qquad"     { $$ = tag_element("&nbsp;&nbsp;&nbsp;&nbsp;", "mo"); }
  | "cdots"     { $$ = tag_element("⋯", "mo"); }
  | "vdots"     { $$ = tag_element("⋮", "mo"); }
  | "ddots"     { $$ = tag_element("⋱", "mo"); }
  | "diamond"     { $$ = tag_element("⋄", "mo"); }
  | "square"    { $$ = tag_element("□", "mo"); }
  | "lfloor"  { $$ = tag_element("⌊", "mo"); }
  | "rfloor"  { $$ = tag_element("⌋", "mo"); }
  | "lceiling"   { $$ = tag_element("⌈", "mo"); }
  | "rceiling"   { $$ = tag_element("⌉", "mo"); }
  | "qed"     { $$ = tag_element("∎", "mo"); }
  | "="       { $$ = tag_element("=", "mo"); }
  | "!="      { $$ = tag_element("≠", "mo"); }
  | ":="        { $$ = tag_element("≔", "mo"); }
  | "preceq"    { $$ = tag_element("⪯", "mo"); }
  | "prec"    { $$ = tag_element("≺", "mo"); }
  | "succeq"    { $$ = tag_element("⪰", "mo"); }
  | "succ"    { $$ = tag_element("≻", "mo"); }
  | "le"      { $$ = tag_element("≤", "mo"); }
  | "ge"  { $$ = tag_element("≥", "mo"); } 
  | "gt"        { $$ = tag_element("&gt;", "mo"); }
  | "rtimes"    { $$ = tag_element("⋊", "mo"); }
  | "in"        { $$ = tag_element("∈", "mo"); }
  | "notin"     { $$ = tag_element("∉", "mo"); }
  | "subseteq"    { $$ = tag_element("⊆", "mo"); }
  | "subset"    { $$ = tag_element("⊂", "mo"); }
  | "supseteq"    { $$ = tag_element("⊇", "mo"); }
  | "supset"    { $$ = tag_element("⊃", "mo"); }
  | "equiv"     { $$ = tag_element("≡", "mo"); }
  | "cong"    { $$ = tag_element("≌", "mo"); }
  | "approx"    { $$ = tag_element("≈", "mo"); }
  | "propto"    { $$ = tag_element("∝", "mo"); }
  | "nsube"       { $$ = tag_element("⊈", "mo"); }
  | "nsupe"       { $$ = tag_element("⊉", "mo"); }
  | "nsub"    { $$ = tag_element("⊄", "mo"); }
  | "nsup"      { $$ = tag_element("⊅", "mo"); }
  | "ni"        { $$ = tag_element("∋", "mo"); }
  | "nni"         { $$ = tag_element("∌", "mo"); }
  | "sum"     { $$ = tag_element("Σ", "mo"); }
  | "prod"    { $$ = tag_element("Π", "mo"); }
  | "bigwedge"  { $$ = tag_element("⋀", "mo"); }
  | "bigvee"  { $$ = tag_element("⋁", "mo"); }
  | "bigcap"  { $$ = tag_element("⋂", "mo"); }
  | "bigcup"  { $$ = tag_element("⋃", "mo"); }
  | "+"     { $$ = tag_element("+", "mo"); }
  | "/"     { $$ = tag_element("/", "mo"); }
  | "!"     { $$ = tag_element("!", "mo"); }
  | "-:"  { $$ = tag_element("÷", "mo"); }
  | "-"     { $$ = tag_element("−", "mo"); }
  | "*"   { $$ = tag_element("∗", "mo"); }
  | "cdot"  { $$ = tag_element("⋅", "mo"); }
  | "bowtie"  { $$ = tag_element("⋈", "mo"); }
  | "ltimes"  { $$ = tag_element("⋉", "mo"); }
  | "times" { $$ = tag_element("×", "mo"); }
  | "circ"  { $$ = tag_element("∘", "mo"); }
  | "oplus" { $$ = tag_element("⊕", "mo"); }
  | "otimes"  { $$ = tag_element("⊗", "mo"); }
  | "odot"  { $$ = tag_element("⊙", "mo"); }
  | "wedge" { $$ = tag_element("∧", "mo"); }
  | "vee" { $$ = tag_element("∨", "mo"); }
  | "cap" { $$ = tag_element("∩", "mo"); }
  | "cup" { $$ = tag_element("∪", "mo"); }
  | "lt"        { $$ = tag_element("&lt;", "mo"); } 
  | "(" { $$ = tag_element("(", "mo"); }
  | ")" { $$ = tag_element(")", "mo"); }
  | "{" { $$ = tag_element(LCURLY, "mo"); }
  | "}" { $$ = tag_element(RCURLY, "mo"); }
  | "lbracket" {$$ = tag_element("[", "mo");}
  | "rbracket" {$$ = tag_element("]", "mo");}


EOL = '\n' | '\r\n' | '\r' 

%%

char*
m_parse_line(char* input)
{
  init_registry();
  yycontext ctx;
  memset(&ctx, 0, sizeof(yycontext));
  
  size_t len = strlen(input);
  M_INPUT = fmemopen(input, len, "r");
  
  while (yyparse(&ctx));

  fclose(M_INPUT);
  M_INPUT = NULL;
  
  char* final = NULL;
  if (M_OUTPUT != NULL)
    final = strdup(M_OUTPUT);
    
  free_registry();
  
  M_OUTPUT = NULL;
  return final;
}

